#include <iostream>
#include <fstream>
#include <string>
#include <thread>
#include <mutex>
#include <zlib.h>

// Mutex for thread-safe output
std::mutex mtx;

// Function to compress data
void compressData(const std::string& input, std::string& output) {
    z_stream strm;
    strm.zalloc = Z_NULL;
    strm.zfree = Z_NULL;
    strm.opaque = Z_NULL;

    if (deflateInit(&strm, Z_DEFAULT_COMPRESSION) != Z_OK) {
        std::lock_guard<std::mutex> lock(mtx);
        std::cerr << "Error initializing compression." << std::endl;
        return;
    }

    strm.avail_in = input.size();
    strm.next_in = (Bytef*)input.c_str();

    char compressedBuffer[1024];
    strm.avail_out = 1024;
    strm.next_out = (Bytef*)compressedBuffer;

    do {
        if (deflate(&strm, Z_FINISH) != Z_STREAM_ERROR) {
            output.assign(compressedBuffer, 1024 - strm.avail_out);
        } else {
            std::lock_guard<std::mutex> lock(mtx);
            std::cerr << "Error compressing data." << std::endl;
            return;
        }
    } while (strm.avail_out == 0);

    deflateEnd(&strm);
}

// Function to write data to file
void writeDataToFile(const std::string& filename, const std::string& data) {
    std::ofstream file(filename, std::ios::binary);
    if (file.is_open()) {
        file.write(data.c_str(), data.size());
        file.close();
    } else {
        std::lock_guard<std::mutex> lock(mtx);
        std::cerr << "Error writing to file." << std::endl;
    }
}

// Function to read data from file
std::string readDataFromFile(const std::string& filename) {
    std::ifstream file(filename);
    if (file.is_open()) {
        std::string data((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
        file.close();
        return data;
    } else {
        std::lock_guard<std::mutex> lock(mtx);
        std::cerr << "Error reading from file." << std::endl;
        return "";
    }
}

// Thread function to compress and write data
void threadFunction(const std::string& inputData, const std::string& filename) {
    std::string compressedData;
    compressData(inputData, compressedData);
    writeDataToFile(filename, compressedData);
}

int main() {
    std::string inputData = "Hello, World!";
    std::string filename = "compressed_data.txt";

    // Create and start a thread to compress and write data
    std::thread thread(threadFunction, inputData, filename);
    thread.join();

    // Read and decompress data
    std::string compressedData = readDataFromFile(filename);
    // Decompression code can be added here

    return 0;
}
